{"version":3,"sources":["index.css","styles.scss","../../assets/styles/_breakpoints.scss","App.scss","assets/styles/_breakpoints.scss"],"names":[],"mappings":"AAAA,KACE,QAAS,CACT,mJAEY,CACZ,kCAAmC,CACnC,iCACF,CAEA,KACE,yEAEF,CCVA,gBACI,wBAAA,CACA,cAAA,CCkNA,qCDpNJ,QAIQ,iBAAA,CACA,QAAA,CACA,WAAA,CACA,UAAA,CAAA,CAPR,OACI,YAAA,CACA,+BAAA,CACA,aAAA,CACA,iBAAA,CCgNA,qCDpNJ,OAOQ,qBAAA,CAAA,CC6MJ,qCDpNJ,OAUQ,sBAAA,CAAA,CAGJ,cACI,aAAA,CCsMJ,qCDnMA,eAEQ,iBAAA,CACA,MAAA,CAAA,CApBZ,MACI,YAAA,CCmNA,qCDpNJ,MAGQ,kBAAA,CACA,4BAAA,CACA,4BAAA,CAAA,CC+MJ,qCDpNJ,MAQQ,qBAAA,CAAA,CAGJ,eACI,WAAA,CCwMJ,qCDzMA,eAGQ,iBAAA,CACA,WAAA,CACA,OAAA,CAAA,CCoMR,qCDzMA,eAQQ,eAAA,CACA,OAAA,CAAA,CCgMR,qCD5LA,WAEQ,WAAA,CACA,QAAA,CACA,OAAA,CAAA,CCwLR,qCD5LA,WAOQ,cAAA,CACA,QAAA,CACA,WAAA,CACA,WAAA,CAAA,CElCZ,KACI,YAAA,CACA,iBAAA,CACA,qBAAA,CCiNA,qCDpNJ,KAMQ,4BAAA,CACA,iBAAA,CACA,kBAAA,CAAA","file":"main.ccd23fec.chunk.css","sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","@import 'assets/styles/styles';\n\n.main {\n    display: flex;\n    @include breakpoint('>large') {\n        flex-direction: row;\n        min-height: calc(100vh - #{_size(footer-height)} - #{_size(header-height)});\n        max-height: calc(100vh - #{_size(footer-height)} - #{_size(header-height)});\n    }\n    @include breakpoint('<=large') {\n        flex-direction: column;\n    }\n\n    .content {\n        height: 100%;\n        @include breakpoint('>large') {\n            overflow-x: hidden;\n            flex-grow: 6;\n            order: 2;\n        }\n        @include breakpoint('<=large') {\n            overflow: hidden;\n            order: 0;\n        }\n    }\n\n    .nav {\n        @include breakpoint('>large') {\n            height: 100%;\n            flex: 1;\n            order: 1;\n        }\n        @include breakpoint('<=large') {\n            position: fixed;\n            bottom: 0;\n            width: 100vw;\n            z-index: 100;\n        }\n    }\n}","// breakpoints.scss v1.0 | @ajlkn | MIT licensed */\n\n// Vars.\n\n/// Breakpoints.\n/// @var {list}\n$breakpoints: (\n    xlarge: (\n        1281px,\n        1680px,\n    ),\n    large: (\n        981px,\n        1280px,\n    ),\n    medium: (\n        737px,\n        980px,\n    ),\n    small: (\n        481px,\n        736px,\n    ),\n    xsmall: (\n        361px,\n        480px,\n    ),\n    xxsmall: (\n        null,\n        360px,\n    ),\n    xlarge-to-max: '(min-width: 1681px)',\n    small-to-xlarge: '(min-width: 481px) and (max-width: 1680px)',\n);\n\n// Mixins.\n\n/// Wraps @content in a @media block targeting a specific orientation.\n/// @param {string} $orientation Orientation.\n@mixin orientation($orientation) {\n    @media screen and (orientation: #{$orientation}) {\n        @content;\n    }\n}\n\n/// Wraps @content in a @media block using a given query.\n/// @param {string} $query Query.\n@mixin breakpoint($query: null) {\n    $breakpoint: null;\n    $op: null;\n    $media: null;\n\n    // Determine operator, breakpoint.\n\n    // Greater than or equal.\n    @if (str-slice($query, 0, 2) == '>=') {\n        $op: 'gte';\n        $breakpoint: str-slice($query, 3);\n    }\n\n    // Less than or equal.\n    @else if (str-slice($query, 0, 2) == '<=') {\n        $op: 'lte';\n        $breakpoint: str-slice($query, 3);\n    }\n\n    // Greater than.\n    @else if (str-slice($query, 0, 1) == '>') {\n        $op: 'gt';\n        $breakpoint: str-slice($query, 2);\n    }\n\n    // Less than.\n    @else if (str-slice($query, 0, 1) == '<') {\n        $op: 'lt';\n        $breakpoint: str-slice($query, 2);\n    }\n\n    // Not.\n    @else if (str-slice($query, 0, 1) == '!') {\n        $op: 'not';\n        $breakpoint: str-slice($query, 2);\n    }\n\n    // Equal.\n    @else {\n        $op: 'eq';\n        $breakpoint: $query;\n    }\n\n    // Build media.\n    @if ($breakpoint and map-has-key($breakpoints, $breakpoint)) {\n        $a: map-get($breakpoints, $breakpoint);\n\n        // Range.\n        @if (type-of($a) == 'list') {\n            $x: nth($a, 1);\n            $y: nth($a, 2);\n\n            // Max only.\n            @if ($x == null) {\n                // Greater than or equal (>= 0 / anything)\n                @if ($op == 'gte') {\n                    $media: 'screen';\n                }\n\n                // Less than or equal (<= y)\n                @else if ($op == 'lte') {\n                    $media: 'screen and (max-width: ' + $y + ')';\n                }\n\n                // Greater than (> y)\n                @else if ($op == 'gt') {\n                    $media: 'screen and (min-width: ' + ($y + 1) + ')';\n                }\n\n                // Less than (< 0 / invalid)\n                @else if ($op == 'lt') {\n                    $media: 'screen and (max-width: -1px)';\n                }\n\n                // Not (> y)\n                @else if ($op == 'not') {\n                    $media: 'screen and (min-width: ' + ($y + 1) + ')';\n                }\n\n                // Equal (<= y)\n                @else {\n                    $media: 'screen and (max-width: ' + $y + ')';\n                }\n            }\n\n            // Min only.\n            @else if ($y == null) {\n                // Greater than or equal (>= x)\n                @if ($op == 'gte') {\n                    $media: 'screen and (min-width: ' + $x + ')';\n                }\n\n                // Less than or equal (<= inf / anything)\n                @else if ($op == 'lte') {\n                    $media: 'screen';\n                }\n\n                // Greater than (> inf / invalid)\n                @else if ($op == 'gt') {\n                    $media: 'screen and (max-width: -1px)';\n                }\n\n                // Less than (< x)\n                @else if ($op == 'lt') {\n                    $media: 'screen and (max-width: ' + ($x - 1) + ')';\n                }\n\n                // Not (< x)\n                @else if ($op == 'not') {\n                    $media: 'screen and (max-width: ' + ($x - 1) + ')';\n                }\n\n                // Equal (>= x)\n                @else {\n                    $media: 'screen and (min-width: ' + $x + ')';\n                }\n            }\n\n            // Min and max.\n            @else {\n                // Greater than or equal (>= x)\n                @if ($op == 'gte') {\n                    $media: 'screen and (min-width: ' + $x + ')';\n                }\n\n                // Less than or equal (<= y)\n                @else if ($op == 'lte') {\n                    $media: 'screen and (max-width: ' + $y + ')';\n                }\n\n                // Greater than (> y)\n                @else if ($op == 'gt') {\n                    $media: 'screen and (min-width: ' + ($y + 1) + ')';\n                }\n\n                // Less than (< x)\n                @else if ($op == 'lt') {\n                    $media: 'screen and (max-width: ' + ($x - 1) + ')';\n                }\n\n                // Not (< x and > y)\n                @else if ($op == 'not') {\n                    $media: 'screen and (max-width: ' + ($x - 1) + '), screen and (min-width: ' + ($y + 1) + ')';\n                }\n\n                // Equal (>= x and <= y)\n                @else {\n                    $media: 'screen and (min-width: ' + $x + ') and (max-width: ' + $y + ')';\n                }\n            }\n        }\n\n        // String.\n        @else {\n            // Missing a media type? Prefix with \"screen\".\n            @if (str-slice($a, 0, 1) == '(') {\n                $media: 'screen and ' + $a;\n            }\n\n            // Otherwise, use as-is.\n            @else {\n                $media: $a;\n            }\n        }\n    }\n\n    // Output.\n    @media #{$media} {\n        @content;\n    }\n}\n","@import 'assets/styles/styles';\n\n.app {\n    display: flex;\n    position: relative;\n    flex-direction: column;\n\n    @include breakpoint('<=large') {\n        min-height: calc(100vh - #{_size(nav-height)}); // minus nav height\n        margin-bottom: _size(nav-height); // nav height\n        padding-bottom: _size(footer-height); // footer height\n    }\n}\n","// breakpoints.scss v1.0 | @ajlkn | MIT licensed */\n\n// Vars.\n\n/// Breakpoints.\n/// @var {list}\n$breakpoints: (\n    xlarge: (\n        1281px,\n        1680px,\n    ),\n    large: (\n        981px,\n        1280px,\n    ),\n    medium: (\n        737px,\n        980px,\n    ),\n    small: (\n        481px,\n        736px,\n    ),\n    xsmall: (\n        361px,\n        480px,\n    ),\n    xxsmall: (\n        null,\n        360px,\n    ),\n    xlarge-to-max: '(min-width: 1681px)',\n    small-to-xlarge: '(min-width: 481px) and (max-width: 1680px)',\n);\n\n// Mixins.\n\n/// Wraps @content in a @media block targeting a specific orientation.\n/// @param {string} $orientation Orientation.\n@mixin orientation($orientation) {\n    @media screen and (orientation: #{$orientation}) {\n        @content;\n    }\n}\n\n/// Wraps @content in a @media block using a given query.\n/// @param {string} $query Query.\n@mixin breakpoint($query: null) {\n    $breakpoint: null;\n    $op: null;\n    $media: null;\n\n    // Determine operator, breakpoint.\n\n    // Greater than or equal.\n    @if (str-slice($query, 0, 2) == '>=') {\n        $op: 'gte';\n        $breakpoint: str-slice($query, 3);\n    }\n\n    // Less than or equal.\n    @else if (str-slice($query, 0, 2) == '<=') {\n        $op: 'lte';\n        $breakpoint: str-slice($query, 3);\n    }\n\n    // Greater than.\n    @else if (str-slice($query, 0, 1) == '>') {\n        $op: 'gt';\n        $breakpoint: str-slice($query, 2);\n    }\n\n    // Less than.\n    @else if (str-slice($query, 0, 1) == '<') {\n        $op: 'lt';\n        $breakpoint: str-slice($query, 2);\n    }\n\n    // Not.\n    @else if (str-slice($query, 0, 1) == '!') {\n        $op: 'not';\n        $breakpoint: str-slice($query, 2);\n    }\n\n    // Equal.\n    @else {\n        $op: 'eq';\n        $breakpoint: $query;\n    }\n\n    // Build media.\n    @if ($breakpoint and map-has-key($breakpoints, $breakpoint)) {\n        $a: map-get($breakpoints, $breakpoint);\n\n        // Range.\n        @if (type-of($a) == 'list') {\n            $x: nth($a, 1);\n            $y: nth($a, 2);\n\n            // Max only.\n            @if ($x == null) {\n                // Greater than or equal (>= 0 / anything)\n                @if ($op == 'gte') {\n                    $media: 'screen';\n                }\n\n                // Less than or equal (<= y)\n                @else if ($op == 'lte') {\n                    $media: 'screen and (max-width: ' + $y + ')';\n                }\n\n                // Greater than (> y)\n                @else if ($op == 'gt') {\n                    $media: 'screen and (min-width: ' + ($y + 1) + ')';\n                }\n\n                // Less than (< 0 / invalid)\n                @else if ($op == 'lt') {\n                    $media: 'screen and (max-width: -1px)';\n                }\n\n                // Not (> y)\n                @else if ($op == 'not') {\n                    $media: 'screen and (min-width: ' + ($y + 1) + ')';\n                }\n\n                // Equal (<= y)\n                @else {\n                    $media: 'screen and (max-width: ' + $y + ')';\n                }\n            }\n\n            // Min only.\n            @else if ($y == null) {\n                // Greater than or equal (>= x)\n                @if ($op == 'gte') {\n                    $media: 'screen and (min-width: ' + $x + ')';\n                }\n\n                // Less than or equal (<= inf / anything)\n                @else if ($op == 'lte') {\n                    $media: 'screen';\n                }\n\n                // Greater than (> inf / invalid)\n                @else if ($op == 'gt') {\n                    $media: 'screen and (max-width: -1px)';\n                }\n\n                // Less than (< x)\n                @else if ($op == 'lt') {\n                    $media: 'screen and (max-width: ' + ($x - 1) + ')';\n                }\n\n                // Not (< x)\n                @else if ($op == 'not') {\n                    $media: 'screen and (max-width: ' + ($x - 1) + ')';\n                }\n\n                // Equal (>= x)\n                @else {\n                    $media: 'screen and (min-width: ' + $x + ')';\n                }\n            }\n\n            // Min and max.\n            @else {\n                // Greater than or equal (>= x)\n                @if ($op == 'gte') {\n                    $media: 'screen and (min-width: ' + $x + ')';\n                }\n\n                // Less than or equal (<= y)\n                @else if ($op == 'lte') {\n                    $media: 'screen and (max-width: ' + $y + ')';\n                }\n\n                // Greater than (> y)\n                @else if ($op == 'gt') {\n                    $media: 'screen and (min-width: ' + ($y + 1) + ')';\n                }\n\n                // Less than (< x)\n                @else if ($op == 'lt') {\n                    $media: 'screen and (max-width: ' + ($x - 1) + ')';\n                }\n\n                // Not (< x and > y)\n                @else if ($op == 'not') {\n                    $media: 'screen and (max-width: ' + ($x - 1) + '), screen and (min-width: ' + ($y + 1) + ')';\n                }\n\n                // Equal (>= x and <= y)\n                @else {\n                    $media: 'screen and (min-width: ' + $x + ') and (max-width: ' + $y + ')';\n                }\n            }\n        }\n\n        // String.\n        @else {\n            // Missing a media type? Prefix with \"screen\".\n            @if (str-slice($a, 0, 1) == '(') {\n                $media: 'screen and ' + $a;\n            }\n\n            // Otherwise, use as-is.\n            @else {\n                $media: $a;\n            }\n        }\n    }\n\n    // Output.\n    @media #{$media} {\n        @content;\n    }\n}\n"]}