{"version":3,"sources":["components/Footer.jsx","ProfilePage/index.jsx","MainPage/index.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","drewer","width","bottomNavigation","position","bottom","Footer","classes","history","useHistory","React","useState","value","setValue","Hidden","mdDown","Drawer","className","variant","anchor","List","ListItem","button","onClick","push","ListItemIcon","ListItemText","primary","lgUp","BottomNavigation","onChange","event","newValue","BottomNavigationAction","label","icon","ProfilePage","theme","root","breakpoints","down","backgroundColor","palette","secondary","main","up","green","MainPage","app","display","content","flexGrow","App","basename","process","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mXAeMA,EAAYC,YAAW,CACzBC,OAAQ,CACJC,MAAO,KAEXC,iBAAkB,CACdC,SAAU,WACVC,OAAQ,EACRH,MAAO,UAIA,SAASI,IACpB,IAAMC,EAAUR,IACVS,EAAUC,cAFa,EAGHC,IAAMC,SAAS,WAHZ,mBAGtBC,EAHsB,KAGfC,EAHe,KAQ7B,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAQC,UAAWV,EAAQN,OAAQiB,QAAQ,YAAYC,OAAO,QAC1D,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAS,kBAAMf,EAAQgB,KAAK,OACzC,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAcC,QAAQ,UAE1B,kBAACN,EAAA,EAAD,CAAUC,QAAM,EAACC,QAAS,kBAAMf,EAAQgB,KAAK,mBACzC,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAcC,QAAQ,gBAKtC,kBAACb,EAAA,EAAD,CAAQc,MAAI,GACR,kBAACC,EAAA,EAAD,CAAkBZ,UAAWV,EAAQJ,iBAAkBS,MAAOA,EAAOkB,SAxB5D,SAACC,EAAOC,GACzBnB,EAASmB,KAwBG,kBAACC,EAAA,EAAD,CACIV,QAAS,kBAAMf,EAAQgB,KAAK,MAC5BU,MAAM,OACNtB,MAAM,OACNuB,KAAM,kBAAC,IAAD,QAEV,kBAACF,EAAA,EAAD,CACIV,QAAS,kBAAMf,EAAQgB,KAAK,kBAC5BU,MAAM,UACNtB,MAAM,UACNuB,KAAM,kBAAC,IAAD,QAEV,kBAACF,EAAA,EAAD,CAAwBC,MAAM,SAAStB,MAAM,SAASuB,KAAM,kBAAC,IAAD,QAC5D,kBAACF,EAAA,EAAD,CAAwBC,MAAM,SAAStB,MAAM,SAASuB,KAAM,kBAAC,IAAD,WCnEjE,SAASC,IACpB,OAAO,wC,oBCCLrC,EAAYC,aAAW,SAACqC,GAAD,YAAY,CACrCC,MAAI,mBACCD,EAAME,YAAYC,KAAK,MAAQ,CAC5BC,gBAAiBJ,EAAMK,QAAQC,UAAUC,OAF7C,cAICP,EAAME,YAAYM,GAAG,MAAQ,CAC1BJ,gBAAiBJ,EAAMK,QAAQf,QAAQiB,OAL3C,cAOCP,EAAME,YAAYM,GAAG,MAAQ,CAC1BJ,gBAAiBK,IAAM,OAR3B,OAaO,SAASC,IACpB,IAAMxC,EAAUR,IAChB,OAAO,yBAAKkB,UAAWV,EAAQ+B,MAAxB,YCZX,IAAMvC,EAAYC,YAAW,CACzBgD,IAAK,CACDC,QAAS,QAEbC,QAAS,CACLC,SAAU,KAsBHC,MAlBf,WACI,IAAM7C,EAAUR,IAChB,OACI,yBAAKkB,UAAWV,EAAQyC,KACpB,kBAAC,IAAD,CAAeK,SAAUC,QACrB,kBAAChD,EAAD,MACA,yBAAKW,UAAWV,EAAQ2C,SACpB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOK,KAAK,IAAIC,OAAK,EAACC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,KAAK,gBAAgBE,UAAWrB,IACvC,kBAAC,IAAD,CAAOqB,UAAW,kBAAM,uDCf5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2abb38df.chunk.js","sourcesContent":["import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Hidden from '@material-ui/core/Hidden';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport HomeIcon from '@material-ui/icons/Home';\nimport AccountIcon from '@material-ui/icons/AccountCircle';\n\nconst useStyles = makeStyles({\n    drewer: {\n        width: 140,\n    },\n    bottomNavigation: {\n        position: 'absolute',\n        bottom: 0,\n        width: '100%',\n    },\n});\n\nexport default function Footer() {\n    const classes = useStyles();\n    const history = useHistory();\n    const [value, setValue] = React.useState('recents');\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    return (\n        <div>\n            <Hidden mdDown>\n                <Drawer className={classes.drewer} variant=\"permanent\" anchor=\"left\">\n                    <List>\n                        <ListItem button onClick={() => history.push('/')}>\n                            <ListItemIcon>\n                                <HomeIcon />\n                            </ListItemIcon>\n                            <ListItemText primary=\"home\" />\n                        </ListItem>\n                        <ListItem button onClick={() => history.push('/profile-page')}>\n                            <ListItemIcon>\n                                <AccountIcon />\n                            </ListItemIcon>\n                            <ListItemText primary=\"profile\" />\n                        </ListItem>\n                    </List>\n                </Drawer>\n            </Hidden>\n            <Hidden lgUp>\n                <BottomNavigation className={classes.bottomNavigation} value={value} onChange={handleChange}>\n                    <BottomNavigationAction\n                        onClick={() => history.push('/')}\n                        label=\"Home\"\n                        value=\"home\"\n                        icon={<HomeIcon />}\n                    />\n                    <BottomNavigationAction\n                        onClick={() => history.push('/profile-page')}\n                        label=\"Profile\"\n                        value=\"profile\"\n                        icon={<AccountIcon />}\n                    />\n                    <BottomNavigationAction label=\"Nearby\" value=\"nearby\" icon={<LocationOnIcon />} />\n                    <BottomNavigationAction label=\"Folder\" value=\"folder\" icon={<FolderIcon />} />\n                </BottomNavigation>\n            </Hidden>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function ProfilePage() {\n    return <div>Profile</div>;\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        [theme.breakpoints.down('sm')]: {\n            backgroundColor: theme.palette.secondary.main,\n        },\n        [theme.breakpoints.up('md')]: {\n            backgroundColor: theme.palette.primary.main,\n        },\n        [theme.breakpoints.up('lg')]: {\n            backgroundColor: green[500],\n        },\n    },\n}));\n\nexport default function MainPage() {\n    const classes = useStyles();\n    return <div className={classes.root}>MainPage</div>;\n}\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Footer from './components/Footer';\nimport ProfilePage from './ProfilePage';\nimport MainPage from './MainPage';\n\nconst useStyles = makeStyles({\n    app: {\n        display: 'flex',\n    },\n    content: {\n        flexGrow: 1,\n    },\n});\n\nfunction App() {\n    const classes = useStyles();\n    return (\n        <div className={classes.app}>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <Footer />\n                <div className={classes.content}>\n                    <Switch>\n                        <Route path=\"/\" exact component={MainPage} />\n                        <Route path=\"/profile-page\" component={ProfilePage} />\n                        <Route component={() => <div>404 Not found </div>} />\n                    </Switch>\n                </div>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}