{"version":3,"sources":["components/CustomInput/PasswordInput.jsx","components/CustomInput/TextInput.jsx","components/CustomInput/index.jsx","views/ProfilePage/BasicMessage.jsx"],"names":["PasswordInput","className","label","useState","password","setPassword","showPassword","setShowPassword","inputProps","endAdornment","InputAdornment","IconButton","onClick","TextField","fullWidth","InputProps","variant","InputLabelProps","shrink","type","onChange","event","target","value","TextInput","autoComplete","setValue","CustomInput","renderInput","BasicMessage","t","useTranslation","title","severity","text","map","index","key","color"],"mappings":"uQA8CeA,MAvCf,YAA8C,IAArBC,EAAoB,EAApBA,UAAWC,EAAS,EAATA,MAAS,EACTC,mBAAS,IADA,mBAClCC,EADkC,KACxBC,EADwB,OAEDF,oBAAS,GAFR,mBAElCG,EAFkC,KAEpBC,EAFoB,KAcnCC,EAAa,CACfC,aACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAbF,WAClBL,GAAiBD,KAaJA,EAAe,kBAAC,IAAD,MAAqB,kBAAC,IAAD,SAMrD,OACI,kBAACO,EAAA,EAAD,CACIZ,UAAWA,EACXa,WAAS,EACTC,WAAYP,EACZQ,QAAQ,WACRC,gBAnBW,CACfC,QAAQ,GAmBJC,KAAMb,EAAe,OAAS,WAC9BJ,MAAOA,EACPkB,SA1Be,SAACC,GACpBhB,EAAYgB,EAAMC,OAAOC,QA0BrBA,MAAOnB,KCbJoB,MAzBf,YAA+E,IAA1DvB,EAAyD,EAAzDA,UAAyD,IAA9CwB,oBAA8C,MAA/B,MAA+B,EAAxBvB,EAAwB,EAAxBA,MAAwB,IAAjBiB,YAAiB,MAAV,OAAU,IAChDhB,mBAAS,IADuC,mBACnEoB,EADmE,KAC5DG,EAD4D,KAU1E,OACI,kBAACb,EAAA,EAAD,CACIZ,UAAWA,EACXa,WAAS,EACTE,QAAQ,WACRC,gBARW,CACfC,QAAQ,GAQJO,aAAcA,EACdvB,MAAOA,EACPiB,KAAMA,EACNC,SAhBe,SAACC,GACpBK,EAASL,EAAMC,OAAOC,QAgBlBA,MAAOA,K,OClBJ,SAASI,EAAT,GAAqD,IAA9BF,EAA6B,EAA7BA,aAAcvB,EAAe,EAAfA,MAAOiB,EAAQ,EAARA,KAWvD,OAAO,yBAAKlB,UAAU,aAVF,WAChB,OAAQkB,GACJ,IAAK,WACD,OAAO,kBAAC,EAAD,CAAejB,MAAOA,IACjC,QACI,OACI,kBAAC,EAAD,CAAWuB,aAAcA,EAAcvB,MAAOA,EAAOiB,KAAMA,KAIxCS,M,iCChBvC,gIAYe,SAASC,IAAgB,IAC5BC,EAAMC,cAAND,EAmBR,OACI,yBAAK7B,UAAU,gBACX,kBAAC,IAAD,CAAgB+B,MAAOF,EAAE,iBACzB,yBAAK7B,UAAU,SACX,kBAAC,IAAD,CAAOe,QAAQ,WAAWiB,SAAS,WAC/B,kBAAC,IAAD,KAAaH,EAAE,kBACdA,EAAE,mBAGX,yBAAK7B,UAAU,iBA1BJ,CACX,CAAEwB,aAAc,QAASS,KAAMJ,EAAE,eAAgBX,KAAM,QACvD,CAAEM,aAAc,aAAcS,KAAMJ,EAAE,oBAAqBX,KAAM,QACjE,CAAEM,aAAc,cAAeS,KAAMJ,EAAE,mBAAoBX,KAAM,QACjE,CAAEM,aAAc,iBAAkBS,KAAMJ,EAAE,iBAAkBX,KAAM,QAClE,CAAEM,aAAc,cAAeS,KAAMJ,EAAE,gBAAiBX,KAAM,QAC9D,CAAEM,aAAc,iBAAkBS,KAAMJ,EAAE,gBAAiBX,KAAM,QACjE,CAAEM,aAAc,iBAAkBS,KAAMJ,EAAE,cAAeX,KAAM,QAC/D,CAAEM,aAAc,eAAgBS,KAAMJ,EAAE,iBAAkBX,KAAM,QAChE,CAAEM,aAAc,MAAOS,KAAMJ,EAAE,eAAgBX,KAAM,QACrD,CAAEM,aAAc,OAAQS,KAAMJ,EAAE,kBAAmBX,KAAM,SAE/CgB,KAAI,SAACjC,EAAOkC,GAAR,OACd,kBAAC,IAAD,CAAaX,aAAcvB,EAAMuB,aAAcvB,MAAOA,EAAMgC,KAAMf,KAAMjB,EAAMiB,KAAMkB,IAAKD,OAerF,kBAAC,IAAD,CAAQpB,QAAQ,YAAYsB,MAAM,WAC7BR,EAAE","file":"static/js/11.b7b253c8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\n\nfunction PasswordInput({ className, label }) {\n    const [password, setPassword] = useState('');\n    const [showPassword, setShowPassword] = useState(false);\n\n    const onIconClicked = () => {\n        setShowPassword(!showPassword);\n    };\n    const onValueChanged = (event) => {\n        setPassword(event.target.value);\n    };\n\n    const labelProps = {\n        shrink: true,\n    };\n    const inputProps = {\n        endAdornment: (\n            <InputAdornment>\n                <IconButton onClick={onIconClicked}>\n                    {showPassword ? <VisibilityIcon /> : <VisibilityOffIcon />}\n                </IconButton>\n            </InputAdornment>\n        ),\n    };\n    \n    return (\n        <TextField\n            className={className}\n            fullWidth\n            InputProps={inputProps}\n            variant=\"outlined\"\n            InputLabelProps={labelProps}\n            type={showPassword ? 'text' : 'password'}\n            label={label}\n            onChange={onValueChanged}\n            value={password}\n        />\n    );\n}\n\nexport default PasswordInput;\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nfunction TextInput({ className, autoComplete = 'off', label, type = 'text' }) {\n    const [value, setValue] = useState('');\n\n    const onValueChanged = (event) => {\n        setValue(event.target.value);\n    };\n\n    const labelProps = {\n        shrink: true,\n    };\n    return (\n        <TextField\n            className={className}\n            fullWidth\n            variant=\"outlined\"\n            InputLabelProps={labelProps}\n            autoComplete={autoComplete}\n            label={label}\n            type={type}\n            onChange={onValueChanged}\n            value={value}\n        />\n    );\n}\n\nexport default TextInput;\n","import React from 'react';\nimport PasswordInput from './PasswordInput';\nimport TextInput from './TextInput';\nimport './styles.scss';\n\nexport default function CustomInput({ autoComplete, label, type }) {\n    const renderInput = () => {\n        switch (type) {\n            case 'password':\n                return <PasswordInput label={label} />;\n            default:\n                return (\n                    <TextInput autoComplete={autoComplete} label={label} type={type} />\n                );\n        }\n    };\n    return <div className=\"textField\">{renderInput()}</div>;\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport CustomInput from '../../components/CustomInput';\nimport ArrowBackTitle from '../../components/Title/ArrowBackTitle';\n\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\nimport './styles.scss';\n\nexport default function BasicMessage() {\n    const { t } = useTranslation();\n    const renderTextFields = () => {\n        const labels = [\n            { autoComplete: 'email', text: t('basic.email'), type: 'text' },\n            { autoComplete: 'given-name', text: t('basic.first-name'), type: 'text' },\n            { autoComplete: 'family-name', text: t('basic.last-name'), type: 'text' },\n            { autoComplete: 'street-address', text: t('basic.address'), type: 'text' },\n            { autoComplete: 'postal-code', text: t('basic.postal'), type: 'text' },\n            { autoComplete: 'address-level1', text: t('basic.county'), type: 'text' },\n            { autoComplete: 'address-level2', text: t('basic.city'), type: 'text' },\n            { autoComplete: 'country-name', text: t('basic.country'), type: 'text' },\n            { autoComplete: 'tel', text: t('basic.phone'), type: 'text' },\n            { autoComplete: 'bday', text: t('basic.birthday'), type: 'date' },\n        ];\n        return labels.map((label, index) => (\n            <CustomInput autoComplete={label.autoComplete} label={label.text} type={label.type} key={index} />\n        ));\n    };\n\n    return (\n        <div className=\"ui container\">\n            <ArrowBackTitle title={t('basic.title')} />\n            <div className=\"alert\">\n                <Alert variant=\"outlined\" severity=\"warning\">\n                    <AlertTitle>{t('alert.warning')}</AlertTitle>\n                    {t('basic.warning')}\n                </Alert>\n            </div>\n            <div className=\"container-2rd\">\n                {renderTextFields()}\n                <Button variant=\"contained\" color=\"primary\">\n                    {t('basic.submit')}\n                </Button>\n            </div>\n        </div>\n    );\n}\n"],"sourceRoot":""}