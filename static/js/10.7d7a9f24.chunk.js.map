{"version":3,"sources":["components/CustomInput/PasswordInput.jsx","components/CustomInput/TextInput.jsx","components/CustomInput/index.jsx","components/PhotoUpload/index.jsx","views/ProfilePage/UploadKYC.jsx"],"names":["PasswordInput","className","label","useState","password","setPassword","showPassword","setShowPassword","inputProps","endAdornment","InputAdornment","IconButton","onClick","TextField","fullWidth","InputProps","variant","InputLabelProps","shrink","type","onChange","event","target","value","TextInput","autoComplete","setValue","CustomInput","renderInput","useStyle","makeStyles","theme","setWidth","breakpoints","up","width","margin","PhotoUpload","classes","t","useTranslation","Card","CardActionArea","console","log","Typography","UploadKYC","open","setOpen","handleTooltipClose","ArrowBackTitle","title","Alert","severity","AlertTitle","ClickAwayListener","onClickAway","Tooltip","PopperProps","disablePortal","popperOptions","modifiers","offset","enabled","onClose","disableFocusListener","disableHoverListener","disableTouchListener","Divider","text","map","index","key","Button","color"],"mappings":"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","file":"static/js/10.7d7a9f24.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\n\nfunction PasswordInput({ className, label }) {\n    const [password, setPassword] = useState('');\n    const [showPassword, setShowPassword] = useState(false);\n\n    const onIconClicked = () => {\n        setShowPassword(!showPassword);\n    };\n    const onValueChanged = (event) => {\n        setPassword(event.target.value);\n    };\n\n    const labelProps = {\n        shrink: true,\n    };\n    const inputProps = {\n        endAdornment: (\n            <InputAdornment>\n                <IconButton onClick={onIconClicked}>\n                    {showPassword ? <VisibilityIcon /> : <VisibilityOffIcon />}\n                </IconButton>\n            </InputAdornment>\n        ),\n    };\n    \n    return (\n        <TextField\n            className={className}\n            fullWidth\n            InputProps={inputProps}\n            variant=\"outlined\"\n            InputLabelProps={labelProps}\n            type={showPassword ? 'text' : 'password'}\n            label={label}\n            onChange={onValueChanged}\n            value={password}\n        />\n    );\n}\n\nexport default PasswordInput;\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nfunction TextInput({ className, autoComplete = 'off', label, type = 'text' }) {\n    const [value, setValue] = useState('');\n\n    const onValueChanged = (event) => {\n        setValue(event.target.value);\n    };\n\n    const labelProps = {\n        shrink: true,\n    };\n    return (\n        <TextField\n            className={className}\n            fullWidth\n            variant=\"outlined\"\n            InputLabelProps={labelProps}\n            autoComplete={autoComplete}\n            label={label}\n            type={type}\n            onChange={onValueChanged}\n            value={value}\n        />\n    );\n}\n\nexport default TextInput;\n","import React from 'react';\nimport PasswordInput from './PasswordInput';\nimport TextInput from './TextInput';\nimport './styles.scss';\n\nexport default function CustomInput({ autoComplete, label, type }) {\n    const renderInput = () => {\n        switch (type) {\n            case 'password':\n                return <PasswordInput label={label} />;\n            default:\n                return (\n                    <TextInput autoComplete={autoComplete} label={label} type={type} />\n                );\n        }\n    };\n    return <div className=\"textField\">{renderInput()}</div>;\n}\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport Typography from '@material-ui/core/Typography';\nimport AddCircleOutline from '@material-ui/icons/AddCircleOutline';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './styles.scss';\n\nconst useStyle = makeStyles((theme) => ({\n    setWidth: {\n        // [theme.breakpoints.up('md')]: {\n        //     width: '50%',\n        //     margin: '1em',\n        // },\n        // [theme.breakpoints.only('sm')]: {\n        //     width: '60%',\n        //     margin: '1em',\n        // },\n        // [theme.breakpoints.down('xs')]: {\n        //     width: '70%',\n        //     margin: '0.5em',\n        // },\n        [theme.breakpoints.up('xs')]: {\n            width: '70%',\n            margin: '0.5em',\n        },\n    },\n}));\n\nexport default function PhotoUpload() {\n    const [picture, setPicture] = useState([]);\n    const classes = useStyle();\n    const { t } = useTranslation();\n\n    return (\n        <Card className=\"card-outer\" variant=\"outlined\">\n            <Card className={`card-inner ${classes.setWidth}`} variant=\"outlined\">\n                <CardActionArea\n                    className=\"cardAction\"\n                    onClick={() => {\n                        console.log('oh~');\n                    }}\n                >\n                    <div className=\"content\">\n                        <AddCircleOutline />\n                        <Typography>{t('upload-pic')}</Typography>\n                    </div>\n                </CardActionArea>\n            </Card>\n        </Card>\n    );\n}\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport CustomInput from '../../components/CustomInput';\nimport ArrowBackTitle from '../../components/Title/ArrowBackTitle';\nimport PhotoUpload from '../../components/PhotoUpload';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport HelpIcon from '@material-ui/icons/Help';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\n\nimport './styles.scss';\n\nexport default function UploadKYC() {\n    const [open, setOpen] = useState(false);\n    const { t } = useTranslation();\n\n    const handleTooltipClose = () => {\n        setOpen(false);\n    };\n\n    const handleTooltipOpen = () => {\n        setOpen(true);\n    };\n\n    const renderInputs = () => {\n        const labels = [\n            { text: t('upload-kyc.bank'), type: 'text' },\n            { text: t('upload-kyc.branch'), type: 'text' },\n            { text: t('upload-kyc.account'), type: 'text' },\n            { text: t('upload-kyc.pin'), type: 'password' },\n            { text: t('upload-kyc.payment-account'), type: 'password' },\n            { text: t('upload-kyc.online-bank-account'), type: 'text' },\n            { text: t('upload-kyc.online-bank-password'), type: 'password' },\n            { text: t('upload-kyc.security-code'), type: 'password' },\n        ];\n\n        return labels.map((label, index) => <CustomInput label={label.text} type={label.type} key={index} />);\n    };\n\n    return (\n        <div className=\"ui container\">\n            <ArrowBackTitle title={t('upload-kyc.title')} />\n            <div className=\"alert\">\n                <Alert variant=\"outlined\" severity=\"warning\">\n                    <AlertTitle>{t('alert.warning')}</AlertTitle>\n                    {t('upload-kyc.warning')}\n                </Alert>\n            </div>\n            <div className=\"container-2rd\">\n                <div className=\"header\">\n                    <Typography variant={'h5'}>{t('upload-kyc.upload-title')}</Typography>\n                    <ClickAwayListener onClickAway={handleTooltipClose}>\n                        <Tooltip\n                            className=\"tooltip\"\n                            PopperProps={{\n                                disablePortal: true,\n                                popperOptions: {\n                                    modifiers: {\n                                        offset: {\n                                            enabled: true,\n                                            offset: '0, -25em',\n                                        },\n                                    },\n                                },\n                            }}\n                            onClose={handleTooltipClose}\n                            open={open}\n                            disableFocusListener\n                            disableHoverListener\n                            disableTouchListener\n                            title={t('upload-kyc.hint')}\n                        >\n                            <IconButton onClick={handleTooltipOpen}>\n                                <HelpIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </ClickAwayListener>\n                </div>\n                <Typography variant={'h6'}>{t('upload-kyc.front')}</Typography>\n                <div>\n                    <PhotoUpload />\n                </div>\n                <Typography variant={'h6'}>{t('upload-kyc.back')}</Typography>\n                <div>\n                    <PhotoUpload />\n                </div>\n                <div className=\"alert\">\n                    <Alert severity=\"info\">{t('upload-kyc.warning-credential')}</Alert>\n                </div>\n            </div>\n            <Divider />\n            <div className=\"container-2rd\">\n                <div className=\"header\">\n                    <Typography variant={'h5'}>{t('upload-kyc.bank-info-title')}</Typography>\n                </div>\n                {renderInputs()}\n                <Button variant=\"contained\" color=\"primary\">\n                    {t('upload-kyc.submit')}\n                </Button>\n            </div>\n        </div>\n    );\n}\n"],"sourceRoot":""}