{"version":3,"sources":["routes.jsx","components/Header.jsx","components/Footer.jsx","components/Navigation.jsx","App.js","serviceWorker.js","index.js"],"names":["routes","mount","route","title","getView","Header","className","style","backgroundColor","Footer","Navigator","basename","navigation","useNavigation","React","useState","value","setValue","Hidden","mdDown","List","ListItem","button","onClick","navigate","ListItemIcon","ListItemText","primary","lgUp","BottomNavigation","onChange","event","newValue","BottomNavigationAction","label","icon","useStyles","makeStyles","theme","app","display","position","flexDirection","breakpoints","down","minHeight","marginBottom","paddingBottom","header","maxHeight","footer","bottom","width","zIndex","main","up","content","height","overflowX","flexGrow","order","overflow","nav","flex","App","classes","process","Grid","container","item","lg","xs","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57dd30b6.chunk.js","sourcesContent":["import { mount, route } from 'navi';\n// import React from 'react';\n\nconst appName = 'PWA';\n\nconst routes = mount({\n    '/': route({\n        title: `Home - ${appName}`,\n        getView: () => import('./views/MainPage'),\n    }),\n    '/data': route({\n        title: `Data - ${appName}`,\n        getView: () => import('./views/DataPage'),\n    }),\n    '/assistant': route({\n        title: `Assistant - ${appName}`,\n        getView: () => import('./views/AssistantPage'),\n    }),\n    '/profile': mount({\n        '/': route({\n            title: `Profile - ${appName}`,\n            getView: () => import('./views/ProfilePage'),\n        }),\n        '/basic': route({\n            title: `Profile/Basic Message - ${appName}`,\n            getView: () => import('./views/ProfilePage/BasicMessage'),\n        }),\n        '/upload': route({\n            title: `Profile/Upload KYC - ${appName}`,\n            getView: () => import('./views/ProfilePage/UploadKYC'),\n        }),\n        '/doc': route({\n            title: `Profile/Documents - ${appName}`,\n            getView: () => import('./views/ProfilePage/Documents'),\n        }),\n        '/about': route({\n            title: `Profile/About Us - ${appName}`,\n            getView: () => import('./views/ProfilePage/About'),\n        }),\n    }),\n});\n\nexport default routes;\n","import React from 'react';\n\nexport default function Header() {\n    return (\n        <div className=\"Header\" style={{ backgroundColor: 'CORNSILK' }}>\n            <h1>Header</h1>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function Footer() {\n    return (\n        <div className=\"footer\" style={{ backgroundColor: 'CORNSILK' }}>\n            <h1>Footer</h1>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useNavigation } from 'react-navi';\nimport { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Hidden from '@material-ui/core/Hidden';\nimport AssistantIcon from '@material-ui/icons/Assistant';\nimport DataUsageIcon from '@material-ui/icons/DataUsage';\nimport HomeIcon from '@material-ui/icons/Home';\nimport AccountIcon from '@material-ui/icons/AccountCircle';\n\nexport default function Navigator({ basename }) {\n    const navigation = useNavigation();\n    const [value, setValue] = React.useState('recents');\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    return (\n        <div>\n            <Hidden mdDown>\n                <List>\n                    <ListItem\n                        button\n                        onClick={() => {\n                            navigation.navigate(`${basename}/`);\n                            setValue('home');\n                        }}\n                    >\n                        <ListItemIcon>\n                            <HomeIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"home\" />\n                    </ListItem>\n                    <ListItem\n                        button\n                        onClick={() => {\n                            navigation.navigate(`${basename}/data`);\n                            setValue('data');\n                        }}\n                    >\n                        <ListItemIcon>\n                            <DataUsageIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Data\" />\n                    </ListItem>\n                    <ListItem\n                        button\n                        onClick={() => {\n                            navigation.navigate(`${basename}/assistant`);\n                            setValue('assistant');\n                        }}\n                    >\n                        <ListItemIcon>\n                            <AssistantIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"Assistant\" />\n                    </ListItem>\n                    <ListItem\n                        button\n                        onClick={() => {\n                            navigation.navigate(`${basename}/profile`);\n                            setValue('profile');\n                        }}\n                    >\n                        <ListItemIcon>\n                            <AccountIcon />\n                        </ListItemIcon>\n                        <ListItemText primary=\"profile\" />\n                    </ListItem>\n                </List>\n            </Hidden>\n            <Hidden lgUp>\n                <BottomNavigation value={value} onChange={handleChange}>\n                    <BottomNavigationAction\n                        onClick={() => navigation.navigate(`${basename}/`)}\n                        label=\"Home\"\n                        value=\"home\"\n                        icon={<HomeIcon />}\n                    />\n                    <BottomNavigationAction\n                        onClick={() => navigation.navigate(`${basename}/data`)}\n                        label=\"Data\"\n                        value=\"data\"\n                        icon={<DataUsageIcon />}\n                    />\n                    <BottomNavigationAction\n                        onClick={() => navigation.navigate(`${basename}/assistant`)}\n                        label=\"Assistant\"\n                        value=\"assistant\"\n                        icon={<AssistantIcon />}\n                    />\n                    <BottomNavigationAction\n                        onClick={() => navigation.navigate(`${basename}/profile`)}\n                        label=\"Profile\"\n                        value=\"profile\"\n                        icon={<AccountIcon />}\n                    />\n                </BottomNavigation>\n            </Hidden>\n        </div>\n    );\n}\n","import React, { Suspense } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Router, View } from 'react-navi';\nimport Grid from '@material-ui/core/Grid';\nimport HelmetProvider from 'react-navi-helmet-async';\n\nimport routes from './routes';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Navigation from './components/Navigation';\n\nconst useStyles = makeStyles((theme) => ({\n    app: {\n        display: 'flex',\n        position: 'relative',\n        flexDirection: 'column',\n        [theme.breakpoints.down('md')]: {\n            minHeight: 'calc(100vh - 4em)', // minus nav height\n            marginBottom: '4em', // nav height\n            paddingBottom: '3em', // footer height\n        },\n    },\n    header: {\n        maxHeight: '7vh',\n        minHeight: '7vh',\n    },\n    footer: {\n        maxHeight: '7vh',\n        minHeight: '7vh',\n        [theme.breakpoints.down('md')]: {\n            position: 'absolute',\n            bottom: '0',\n            width: '100vw',\n            zIndex: '-1',\n        },\n    },\n    main: {\n        display: 'flex',\n        [theme.breakpoints.up('lg')]: {\n            flexDirection: 'row',\n            minHeight: '86vh',\n            maxHeight: '86vh',\n        },\n        [theme.breakpoints.down('md')]: {\n            flexDirection: 'column',\n        },\n    },\n    content: {\n        height: '100%',\n        [theme.breakpoints.up('lg')]: {\n            overflowX: 'hidden',\n            flexGrow: 6,\n            order: 2,\n        },\n        [theme.breakpoints.down('md')]: {\n            overflow: 'hidden',\n            order: 0,\n        },\n    },\n    nav: {\n        [theme.breakpoints.up('lg')]: {\n            height: '100%',\n            flex: 1,\n            order: 1,\n            // backgroundColor: 'DARKKHAKI',\n        },\n        [theme.breakpoints.down('md')]: {\n            position: 'fixed',\n            bottom: 0,\n            width: '100vw',\n            zIndex: 100,\n            // backgroundColor: 'GOLDENROD',\n        },\n    },\n}));\n\nconst basename = process.env.PUBLIC_URL;\n\nfunction App() {\n    const classes = useStyles();\n    return (\n        <div className={classes.app}>\n            <div className={classes.header}>\n                <Header />\n            </div>\n            <div className={classes.main}>\n                <HelmetProvider>\n                    <Router routes={routes} basename={basename}>\n                        <Grid container>\n                            <Grid className={classes.nav} item lg={2} xs={12}>\n                                <Navigation basename={basename} />\n                            </Grid>\n                            <Grid className={classes.content} item lg={10} xs={12}>\n                                <Suspense fallback={null}>\n                                    <View />\n                                </Suspense>\n                            </Grid>\n                        </Grid>\n                    </Router>\n                </HelmetProvider>\n            </div>\n            <div className={classes.footer}>\n                <Footer />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}