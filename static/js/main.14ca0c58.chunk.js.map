{"version":3,"sources":["components/Footer.jsx","ProfilePage/index.jsx","MainPage/index.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","position","bottom","width","Footer","classes","history","useHistory","React","useState","value","setValue","className","BottomNavigation","onChange","event","newValue","BottomNavigationAction","onClick","push","label","icon","ProfilePage","MainPage","App","basename","process","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TASMA,EAAYC,YAAW,CACzBC,KAAM,CACFC,SAAU,WACVC,OAAQ,EACRC,MAAO,UAIA,SAASC,IACpB,IAAMC,EAAUP,IACVQ,EAAUC,cAFa,EAGHC,IAAMC,SAAS,WAHZ,mBAGtBC,EAHsB,KAGfC,EAHe,KAQ7B,OACI,yBAAKC,UAAWP,EAAQL,MACpB,kBAACa,EAAA,EAAD,CAAkBH,MAAOA,EAAOI,SALnB,SAACC,EAAOC,GACzBL,EAASK,KAKD,kBAACC,EAAA,EAAD,CACIC,QAAS,kBAAMZ,EAAQa,KAAK,MAC5BC,MAAM,OACNV,MAAM,OACNW,KAAM,kBAAC,IAAD,QAEV,kBAACJ,EAAA,EAAD,CACIC,QAAS,kBAAMZ,EAAQa,KAAK,kBAC5BC,MAAM,UACNV,MAAM,UACNW,KAAM,kBAAC,IAAD,QAEV,kBAACJ,EAAA,EAAD,CAAwBG,MAAM,SAASV,MAAM,SAASW,KAAM,kBAAC,IAAD,QAC5D,kBAACJ,EAAA,EAAD,CAAwBG,MAAM,SAASV,MAAM,SAASW,KAAM,kBAAC,IAAD,UCvC7D,SAASC,IACpB,OAAO,wCCDI,SAASC,IACpB,OAAO,yCCmBIC,MAff,WACI,OACI,yBAAKZ,UAAU,OACX,kBAAC,IAAD,CAAea,SAAUC,QACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,KAAK,gBAAgBE,UAAWP,IACvC,kBAAC,IAAD,CAAOO,UAAW,kBAAM,mDAE5B,kBAACzB,EAAD,SCJI0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.14ca0c58.chunk.js","sourcesContent":["import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport HomeIcon from '@material-ui/icons/Home';\nimport AccountIcon from '@material-ui/icons/AccountCircle';\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'absolute',\n        bottom: 0,\n        width: '100%',\n    },\n});\n\nexport default function Footer() {\n    const classes = useStyles();\n    const history = useHistory();\n    const [value, setValue] = React.useState('recents');\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    return (\n        <div className={classes.root}>\n            <BottomNavigation value={value} onChange={handleChange}>\n                <BottomNavigationAction\n                    onClick={() => history.push('/')}\n                    label=\"Home\"\n                    value=\"home\"\n                    icon={<HomeIcon />}\n                />\n                <BottomNavigationAction\n                    onClick={() => history.push('/profile-page')}\n                    label=\"Profile\"\n                    value=\"profile\"\n                    icon={<AccountIcon />}\n                />\n                <BottomNavigationAction label=\"Nearby\" value=\"nearby\" icon={<LocationOnIcon />} />\n                <BottomNavigationAction label=\"Folder\" value=\"folder\" icon={<FolderIcon />} />\n            </BottomNavigation>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function ProfilePage() {\n    return <div>Profile</div>;\n}\n","import React from 'react';\n\nexport default function MainPage() {\n    return <div>MainPage</div>;\n}\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Footer from './components/Footer';\nimport ProfilePage from './ProfilePage';\nimport MainPage from './MainPage';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route path=\"/\" exact component={MainPage} />\n                    <Route path=\"/profile-page\" component={ProfilePage} />\n                    <Route component={() => <div>404 Not found </div>} />\n                </Switch>\n                <Footer />\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}